7. Для заданного натурального числа N и позиции P (отсчитанной 
с конца, где P = 1 означает последнюю цифру) найдите цифру, которая 
находится на P-ой позиции в десятичной записи числа N.
1.C++
#include <iostream>
#include <string>
using namespace std;
int main() {
    string N;
    int P;
    cout << "Введите число N: ";
    cin >> N;
    cout << "Введите позицию P: ";
    cin >> P;
    
    if (P > N.length() || P <= 0) {
        cout << "Некорректная позиция!" << endl;
    } else {
        cout << "Цифра на позиции " << P << ": " << N[N.length() - P] << endl;
    }
    return 0;
}
 
2. Kotlin
fun main() {
    print("Введите число N: ")
    val N = readLine()!!
    print("Введите позицию P: ")
    val P = readLine()!!.toInt()
    if (P > N.length || P <= 0) {
        println("Некорректная позиция!")
    } else {
        println("Цифра на позиции $P: ${N[N.length - P]}")
    }
}
 
3. C#
using System;
using System.Text;
class Program 
{
    static void Main() 
    {
        Console.OutputEncoding = Encoding.UTF8;
        Console.Write("Введите число N: ");
        string N = Console.ReadLine();
        Console.Write("Введите позицию P: ");
        int P = int.Parse(Console.ReadLine());
        if (P > N.Length || P <= 0) 
        {
            Console.WriteLine("Некорректная позиция!");
        } 
        else 
        {
            Console.WriteLine($"Цифра на позиции {P}: {N[N.Length - P]}");
        }
    }
}
 
4. PHP
<?
echo "Введите число N: ";
$N = trim(fgets(STDIN));
echo "Введите позицию P: ";
$P = intval(trim(fgets(STDIN)));
if ($P > strlen($N) || $P <= 0) {
    echo "Некорректная позиция!\n";
} else {
    echo "Цифра на позиции $P: " . $N[strlen($N) - $P] . "\n";
}
?>
 
5. Rust
use std::io;
fn main() {
    println!("Введите число N: ");
    let mut N = String::new();
    io::stdin().read_line(&mut N).expect("Ошибка ввода");
    let N = N.trim();
    println!("Введите позицию P: ");
    let mut P = String::new();
    io::stdin().read_line(&mut P).expect("Ошибка ввода");
    let P: usize = P.trim().parse().expect("Ожидалось число");
    
    if P > N.len() || P <= 0 {
        println!("Некорректная позиция!");
    } else {
        println!("Цифра на позиции {}: {}", P, N.chars().nth(N.len() - P).unwrap());
    }
}
 
6. Go 
package main
import (
	"fmt"
)
func main() {
	var N string
	var P int
	fmt.Print("Введите число N: ")
	fmt.Scan(&N)
	fmt.Print("Введите позицию P: ")
	fmt.Scan(&P)

	if P > len(N) || P <= 0 {
		fmt.Println("Некорректная позиция!")
	} else {
		fmt.Printf("Цифра на позиции %d: %c\n", P, N[len(N)-P])
	}
}
 
7. TypeScript
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});
readline.question('Введите число N: ', (N: string) => {
  readline.question('Введите позицию P: ', (PStr: string) => {
    const P = parseInt(PStr);
    if (P > N.length || P <= 0) {
      console.log("Некорректная позиция!");
    } else {
      console.log(`Цифра на позиции ${P}: ${N[N.length - P]}`);
    }
  });
});
 
8. Swift
import Foundation
print("Введите число N: ", terminator: "")
let N = readLine()!
print("Введите позицию P: ", terminator: "")
let P = Int(readLine()!)!
if P > N.count || P <= 0 {
    print("Некорректная позиция!")
} else {
    let index = N.index(N.endIndex, offsetBy: -P)
    print("Цифра на позиции \(P): \(N[index])")
}
 
9. JavaScript 
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});
readline.question('Введите число N: ', N => {
  readline.question('Введите позицию P: ', PStr => {
    const P = parseInt(PStr);
    
    if (P > N.length || P <= 0) {
      console.log("Некорректная позиция!");
    } else {
      console.log(`Цифра на позиции ${P}: ${N[N.length - P]}`);
    }
    readline.close();
  });
});
 
10. Python
N = input("Введите число N: ")
P = int(input("Введите позицию P: "))
if P > len(N) or P <= 0:
    print("Некорректная позиция!")
else:
    print(f"Цифра на позиции {P}: {N[-P]}")
 
11. Java
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите число N: ");
        String N = scanner.nextLine();
        System.out.print("Введите позицию P: ");
        int P = scanner.nextInt();
        if (P > N.length() || P <= 0) {
            System.out.println("Некорректная позиция!");
        } else {
            System.out.println("Цифра на позиции " + P + ": " + N.charAt(N.length() - P));
        }
    }
}
 
12. Ruby
print "Введите число N: "
N = gets.chomp
print "Введите позицию P: "
P = gets.chomp.to_i
if P > N.length || P <= 0
  puts "Некорректная позиция!"
else
  puts "Цифра на позиции #{P}: #{N[-P]}"
end
 
13. Ассемблер
section .data ; строки для вывода приглашений и результата
    promptN db "Введите число N: ", 0
    promptP db "Введите позицию P: ", 0
    result db "Цифра на позиции P: ", 0
    newline db 10, 0
    error_msg db "Некорректная позиция!", 10, 0
section .bss
; буфер для значений
    N resb 100       
    P resb 10
        
    num_len resd 1   
    P_num resd 1     
section .text
    global _start
_start:
; ввод числа N
    mov eax, 4
    mov ebx, 1
    mov ecx, promptN
    mov edx, 16
    int 0x80
    mov eax, 3
    mov ebx, 0
    mov ecx, N
    mov edx, 100
    int 0x80
; вычисление длины N
    mov edi, N
    xor ecx, ecx
    not ecx
    xor al, al
    cld
    repne scasb
    not ecx
    dec ecx
    dec ecx          
    mov [num_len], ecx
    mov eax, 4
    mov ebx, 1
    mov ecx, promptP
    mov edx, 18
    int 0x80
    mov eax, 3
    mov ebx, 0
    mov ecx, P
    mov edx, 10
    int 0x80
    mov esi, P
    xor eax, eax
    xor ebx, ebx
; ввод и преобразование P
    .convert_p:
        mov bl, [esi]
        cmp bl, 10     
        je .p_converted
        sub bl, '0'
        imul eax, 10
        add eax, ebx
        inc esi
        jmp .convert_p
    .p_converted:
    mov [P_num], eax
    cmp eax, 1
    jl .error
; Проверка позиции и вывод результата
    cmp eax, [num_len]
    jg .error
    mov ebx, [num_len]
    sub ebx, [P_num]   
    mov al, [N + ebx]
    mov [result + 18], al  
    mov eax, 4
    mov ebx, 1
    mov ecx, result
    mov edx, 19
    int 0x80
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80
    jmp .exit
.error:
    mov eax, 4
    mov ebx, 1
    mov ecx, error_msg
    mov edx, 20
    int 0x80
.exit:
    mov eax, 1
